{"ast":null,"code":"var _jsxFileName = \"/Users/willirving/Desktop/dev/nology/react/artefact/src/components/Card/Card.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styles from \"./Card.module.scss\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Card = props => {\n  _s();\n\n  const {\n    objects,\n    index,\n    isSearched\n  } = props;\n  const API_URL = \"https://collectionapi.metmuseum.org/public/collection/v1/objects/\";\n  const [image, setImage] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [medium, setMedium] = useState(\"\");\n  const [sculpture, setSculpture] = useState({});\n  const [showInfo, setShowInfo] = useState(false);\n  const flipCard = showInfo ? styles.description : styles.opaque;\n  useEffect(() => {\n    const getSculpture = async theIndex => {\n      const string = `${API_URL}${objects[theIndex]}`;\n      return fetch(`${string}`).then(res => res.json()).then(jsonResponse => {\n        if (jsonResponse !== null) {\n          return jsonResponse;\n        } else {\n          return [];\n        }\n      });\n    };\n\n    const updateSculpture = async currentIndex => {\n      const apiObject = await getSculpture(currentIndex);\n      setSculpture(apiObject);\n    };\n\n    const updateImage = currentSculpture => {\n      if (Object.keys(sculpture).length > 1) {\n        if (sculpture.primaryImage.length > 1) {\n          setImage(sculpture.primaryImage);\n        } else {\n          setImage(sculpture.additionalImages[0]);\n        }\n      } else return \"\";\n    };\n\n    updateSculpture(index).then(() => {\n      updateImage(sculpture);\n      setTitle(sculpture.title);\n      setMedium(sculpture.medium);\n      setDate(sculpture.objectDate);\n    });\n  }, [index]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.imgBox,\n      onClick: () => setShowInfo(!showInfo),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: flipCard,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"TITLE -\", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"MEDIUM - \", medium]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"DATE - \", date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"\",\n        onerror: \"this.style.display='none'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Card, \"X+KzJ+or2U9Ia6MI3j7U+7TsJR8=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/willirving/Desktop/dev/nology/react/artefact/src/components/Card/Card.jsx"],"names":["React","styles","useState","useEffect","Card","props","objects","index","isSearched","API_URL","image","setImage","title","setTitle","date","setDate","medium","setMedium","sculpture","setSculpture","showInfo","setShowInfo","flipCard","description","opaque","getSculpture","theIndex","string","fetch","then","res","json","jsonResponse","updateSculpture","currentIndex","apiObject","updateImage","currentSculpture","Object","keys","length","primaryImage","additionalImages","objectDate","imgBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styles from \"./Card.module.scss\";\nimport { useState, useEffect } from \"react\";\n\nconst Card = (props) => {\n  const { objects, index, isSearched } = props;\n\n  const API_URL =\n    \"https://collectionapi.metmuseum.org/public/collection/v1/objects/\";\n\n  const [image, setImage] = useState(\"\");\n\n  const [title, setTitle] = useState(\"\");\n\n  const [date, setDate] = useState(\"\");\n\n  const [medium, setMedium] = useState(\"\");\n\n  const [sculpture, setSculpture] = useState({});\n\n  const [showInfo, setShowInfo] = useState(false);\n\n  const flipCard = showInfo ? styles.description : styles.opaque;\n\n  useEffect(() => {\n    const getSculpture = async (theIndex) => {\n      const string = `${API_URL}${objects[theIndex]}`;\n      return fetch(`${string}`)\n        .then((res) => res.json())\n        .then((jsonResponse) => {\n          if (jsonResponse !== null) {\n            return jsonResponse;\n          } else {\n            return [];\n          }\n        });\n    };\n\n    const updateSculpture = async (currentIndex) => {\n      const apiObject = await getSculpture(currentIndex);\n      setSculpture(apiObject);\n    };\n\n    const updateImage = (currentSculpture) => {\n      if (Object.keys(sculpture).length > 1) {\n        if (sculpture.primaryImage.length > 1) {\n          setImage(sculpture.primaryImage);\n        } else {\n          setImage(sculpture.additionalImages[0]);\n        }\n      } else return \"\";\n    };\n\n    updateSculpture(index).then(() => {\n      updateImage(sculpture);\n      setTitle(sculpture.title);\n      setMedium(sculpture.medium);\n      setDate(sculpture.objectDate);\n    });\n  }, [index]);\n\n  return (\n    <>\n      <div className={styles.imgBox} onClick={() => setShowInfo(!showInfo)}>\n        <div className={flipCard}>\n          <p>TITLE -{title}</p>\n          <p>MEDIUM - {medium}</p>\n          <p>DATE - {date}</p>\n        </div>\n        <img src={image} alt=\"\" onerror=\"this.style.display='none'\" />\n      </div>\n    </>\n  );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}